name: Create backend instance from user's input 

# on:
#   workflow_dispatch

# Triggers the workflow on api call
on:
  repository_dispatch:
    types: [instance]
    
env:
  #DEPLOYMENT: '${{ github.event.client_payload.deployment_file.deployment }}'
  #DEPLOYMENT: '{{ "apiVersion": "apps/v1", "kind": "Deployment", "metadata": { "name": "frontend-deployment", "labels": { "app": "frontend" } }, "spec": { "replicas": 1, "selector": { "matchLabels": { "app": "frontend" } }, "template": { "metedata": { "labels": { "app": "frontend" } }, "spec": { "imagePullSecrets": { "name": "jfrog-secret" }, "containers": { "name": "frontend", "image": "sreyo.jfrog.io/ns-docker-dev-local/frontend-docker", "imagePullPolicy": "Always", "ports": { "cointainerPort": 80 } } } } } }'
  templateName1: "base/kustomization.template"           
  templateName: "./overlays/patch.template"
  fileName1: "base/kustomization"
  fileName: "./overlays/patch"
  namePrefix: "${{ github.event.client_payload.deployment_file.namePrefix }}-"
  labelName: "${{ github.event.client_payload.deployment_file.namePrefix }}-customer"
#   namePrefix: "${name} -"
#   label: '${{ github.event.client_payload.deployment_file.label }}'
  databaseName: '${{ github.event.client_payload.deployment_file.namePrefix }}'
  containerPortVal: '${{ github.event.client_payload.deployment_file.containerPortVal }}'
  portVal: '${{ github.event.client_payload.deployment_file.portVal }}'
  domainName: '${{ github.event.client_payload.deployment_file.domainName }}'
  serviceName: '${{ github.event.client_payload.deployment_file.serviceName }}'
  JOB_ID: '${{ github.event.client_payload.deployment_file.callbackId }}'
  nameSpace: '${{ github.event.client_payload.deployment_file.namespace }}'
  FRONTEND_NAME: '${{ github.event.client_payload.deployment_file.frontend_domain }}'
  BACKEND_NAME: '${{ github.event.client_payload.deployment_file.backend_domain }}' 
  EKS_CLUSTER: dev
  EKS_REGION: us-east-2


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Job1:
    name: update Kustomization files
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
     - name: Checkout
       uses: actions/checkout@v2
       with:
         persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
         fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
     - name: Create local changes
       run: |
        echo ${FRONTEND_NAME}
        sed "s|namePrefix_name|$namePrefix|g; " $templateName1.yaml > $fileName1.yaml
        #sed "s|containerPortVal|$containerPortVal|g; s|portVal|$portVal|g; s|serviceName|$serviceName|g;" $templateName.yaml > $fileName.yaml
        sed "s|labelName|$labelName|g; s|containerPortVal|$containerPortVal|g; s|portVal|$portVal|g; s|domainName|$domainName|g; s|serviceName|$serviceName|g; s|databaseName|$databaseName|g;" $templateName.yaml > $fileName.yaml
        # sed "s|labelName|$labelName|g; s|containerPortVal|$containerPortVal|g; s|portVal|$portVal|g; s|domainName|$domainName|g; s|serviceName|$serviceName|g;" $templateName.yaml > $fileName.yaml
    
     - name: Commit files
       run: |
        git config --local user.email "neethu.somasekharan@sreyo.com"
        git config --local user.name "Neethusnair"
        git commit -m "Add changes" -a
     - name: Push changes
       uses: ad-m/github-push-action@master
       with:
        github_token: ${{ secrets.PERSONAL_TOKEN}}
        #branch: ${{ github.ref }}
        branch: main
    
  job2:
    needs: Job1
    name: Send call to subdomain workflow
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
     - name: Checkout
       uses: actions/checkout@v2

     - name: Repository Dispatch to subdomain workflow
       uses: peter-evans/repository-dispatch@v1
       with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          event-type: subdomain
          client-payload: '{"frontdomain_name": "${{ env.FRONTEND_NAME }}", "domain_name": "${{ env.BACKEND_NAME }}", "job_Id": "${{ env.JOB_ID }}", "namespace": "${{ env.nameSpace }}"}'  
          #client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "test": "test message"}' 

